@page "/Account_creation"
@using Parduotuve.Data.Entities
@using Parduotuve.Data.Enums
@using Parduotuve.Helpers.Wrappers
@using Parduotuve.Services
@inject NavigationManager NavManager
@inject AuthService AuthService
@inject ISnackbar SnackBar

<MudContainer MaxWidth="MaxWidth.ExtraSmall" Class="d-flex justify-center align-center min-vh-100 pa-5">
    <MudPaper Elevation="3" Class="pa-5" Style="border-radius: 12px; width: 100%;">
        <MudText Typo="Typo.h5" Class="mb-4 text-center">Register</MudText>

        <MudForm Model="@_input" IsValid="@_isValid" @ref="_form">
            <MudTextField Label="First name" @bind-Value="@_input.Name"/>
            <MudTextField Label="Surname" @bind-Value="@_input.Surname"/>
            <MudTextField Label="E-mail" @bind-Value="@_input.Email" Required="true" InputType="InputType.Email"
                          RequiredError="E-mail is required."/>
            <MudTextField Label="Username" @bind-Value="@_input.Username" Required="true"
                          RequiredError="Username is required."/>
            <MudTextField Label="Password" @bind-Value="@_input.Password" Required="true"
                          RequiredError="Password is required." InputType="InputType.Password"/>

            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateAccount" Disabled="@_loading"
                       Class="mt-3" FullWidth>
                <MudProgressCircular Indeterminate="true" Size="Size.Large" Style="margin-right: 10px;"
                                     Hidden="!_loading"/>
                Register
            </MudButton>
            <MudText Color="@MessageColor">@Message</MudText>
            <MudLink Href="/Login">Return to login page</MudLink>
        </MudForm>
    </MudPaper>
</MudContainer>

@code {
    private InputInfo _input = new();
    private MudForm _form = null!;
    private bool _loading;
    private bool _isValid;
    private string Message { get; set; } = string.Empty;
    private Color MessageColor { get; set; } = Color.Primary;

    public async Task CreateAccount()
    {
        _loading = true;
        Message = "";
        await _form.Validate();
        _isValid = _form.IsValid;
        if (!_isValid)
        {
            _loading = false;
            return;
        }

        Result<User> creationResult = await AuthService.RegisterAsync(_input.Email, _input.Username, _input.Password, UserRole.User);
        if (creationResult)
        {
            Message = "Account has been successfully created!";
            MessageColor = Color.Success;
            _input = new InputInfo();
            _loading = false;
            SnackBar.Add("Account successfully created! You may now log in.", Severity.Success);
            NavManager.NavigateTo("/Login");
        }
        else
        {
            Message = creationResult.Message;
            MessageColor = Color.Error;
            _loading = false;
        }

        StateHasChanged();
    }

    protected class InputInfo
    {
        public string Name { get; set; }
        public string Surname { get; set; }
        public string Email { get; set; }
        public string Username { get; set; }
        public string Password { get; set; }

        public InputInfo()
        {
            Name = "";
            Surname = "";
            Email = "";
            Username = "";
            Password = "";
        }
    }

}