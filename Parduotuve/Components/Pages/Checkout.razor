@page "/Checkout/{CartString}"
@using Parduotuve.Data.Entities
@using Parduotuve.Data.Repositories
@using System.Text;
@inject NavigationManager NavManager
@inject ISkinRepository _skinRepository
@inject IJSRuntime JS


@if (CartString!="thanks")
{
    <h2>Your shopping cart:</h2>
    <script>
        window.downloadFileFromStream = async (fileName, contentStreamReference) => {
            const arrayBuffer = await contentStreamReference.arrayBuffer();
            const blob = new Blob([arrayBuffer]);
            const url = URL.createObjectURL(blob);
            const anchorElement = document.createElement('a');
            anchorElement.href = url;
            anchorElement.download = fileName ?? '';
            anchorElement.click();
            anchorElement.remove();
            URL.revokeObjectURL(url);
        }
    </script>

    <table>
        <tr>
            <th>Name</th>
            <th>Amount</th>
            <th>Price</th>
        </tr>
        @foreach ((int, Skin) entry in Cart)
        {
            <tr>
                <td>@entry.Item2.Name</td>
                <td>@entry.Item1</td>
                <td>@(entry.Item2.Price * entry.Item1)</td>
            </tr>
        }
    </table>
    <style>
        table, th, td {
            border: 1px solid black;
            border-collapse: collapse;
            text-align: center;
            padding: 4px;
        }
    </style>

    <h2>Total price: @TotalPrice</h2>
    <button @onclick="ConfirmPurchase">Finalize purchase</button>
}
else
{
    <h2>Thank you for your order!</h2>
    <h3>You will receive your real purchased goods through the means of a file download soon</h3>
}

@code {
    /// <summary>
    /// The string represenation of the customers' cart
    /// Items are represented by their IDs and separated with the '&' symbol
    /// If the cart contains X amount of an item, the ID of such an item would be repeated X times
    /// Example of a CartString: "1&1&1&2&3&5&6"
    /// In the case that the order was completed, the CartString would be "thanks" in order to display the thank you page, instead of the checkout page
    /// This will likely be replaced and deprecated in the future
    /// </summary>
    [Parameter]
    public string CartString { get; set; } = "";
    /// <summary>
    /// CartString is converted into a list of tuples where the first item represents the amount, while the second item represents the item itself
    /// </summary>
    public List<(int, Skin)> Cart { get; private set; } = new List<(int, Skin)>();
    private double? TotalPrice { get { return (double?)Math.Round((double)Cart.Select((e) => e.Item1 * e.Item2.Price).Sum(),2); } }

    protected override async Task OnInitializedAsync()
    {
        //Do not initialize if order was completed
        if(CartString == "thanks")
        {
            return;
        }

        //Conversion of CartString to Cart
        List<int> ids = CartString.Split('&').Select(str => int.Parse(str)).ToList();
        List<(int, int)> idCart = new List<(int, int)>();

        foreach(int id in ids)
        {
            int foundIndex = -1;
            for (int x = 0; x < idCart.Count; x++)
            {
                if(idCart[x].Item2 == id) {
                    foundIndex = x;
                    break;
                }
            }
            if(foundIndex > -1)
            {
                idCart[foundIndex] = (idCart[foundIndex].Item1+1, idCart[foundIndex].Item2);
            }
            else
            {
                idCart.Add((1, id));
            }
        }
        foreach((int, int) entry in idCart)
        {
            Skin? skin = await _skinRepository.GetByIdAsync(entry.Item2);

            if(skin == null)
            {
                continue;
            }

            Cart.Add((entry.Item1, skin));
        }
    }

    /// <summary>
    /// Creates and returns a stream which contains details regarding the purchased goods
    /// </summary>
    /// <returns>A stream with a text representation with the purchased goods</returns>
    private Stream GetFileStream()
    {
        string contents = "";

        contents += "You are hereby the real owner of the following purchased goods:\n";
        foreach((int, Skin) entry in Cart)
        {
            for(int x = 0; x < entry.Item1; x++)
            {
                contents += entry.Item2.Name+"\n";
            }
        }

        byte[] contentBytes = Encoding.UTF8.GetBytes(contents);

        MemoryStream memoryStream = new MemoryStream(contentBytes);

        return memoryStream;
    }
    /// <summary>
    /// This method handles the event of clicking the confirm purchase button
    /// It is responsible for performing verification and delivering the purchased items
    /// </summary>
    private async Task ConfirmPurchase()
    {
        Stream fileStream = GetFileStream();
        string fileName = "wares.txt";

        using DotNetStreamReference streamRef = new DotNetStreamReference(stream: fileStream);

        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);

        NavManager.NavigateTo("/Checkout/thanks");
    }
}
