@page "/Account_creation"
@using Parduotuve.Data.Entities
@using Parduotuve.Services
@inject NavigationManager NavManager
@inject AuthService AuthService


<MudContainer MaxWidth="MaxWidth.ExtraSmall" Class="d-flex justify-center align-center min-vh-100 pa-5">
    <MudPaper Elevation="3" Class="pa-5" Style="border-radius: 12px; width: 100%;">
        <MudText Typo="Typo.h5" Class="mb-4 text-center">Login</MudText>

        <MudForm Model="@input" IsValid="@_isValid" @ref="form">
            <MudTextField Label="First name" @bind-Value="@input.Name"/>
            <MudTextField Label="Surname" @bind-Value="@input.Surname"/>
            <MudTextField Label="E-mail" @bind-Value="@input.Email" Required="true" InputType="InputType.Email" RequiredError="E-mail is required." />
            <MudTextField Label="Username" @bind-Value="@input.Username" Required="true" RequiredError="Username is required." />
            <MudTextField Label="Password" @bind-Value="@input.Password" Required="true" RequiredError="Password is required." InputType="InputType.Password" />

            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateAccount" Disabled="@_loading" Class="mt-3" FullWidth>
                <MudProgressCircular Indeterminate="true" Size="Size.Large" Style="margin-right: 10px;" Hidden="!_loading" />
                Login
            </MudButton>
            <MudText Color="@messageColor">@message</MudText>
            <MudLink Href="/AdminLogin">Return to login page</MudLink>
        </MudForm>
    </MudPaper>
</MudContainer>

@code {
    private InputInfo input = new InputInfo();
    private MudForm form;
    private bool _loading = false;
    private bool _isValid = false;
    private string message { get; set; } = String.Empty;
    private Color messageColor { get; set; } = Color.Primary;

    public async Task CreateAccount()
    {
        _loading = true;
        message = "";
        await form.Validate();
        _isValid = form.IsValid;
        if (!_isValid)
        {
            _loading = false;
            return;
        }
        var existingUser = await AuthService.Check_if_user_exists(input.Username);
        if (existingUser != null)
        {
            message = "User with such username already exists!";
            messageColor = Color.Error;
            _loading = false;
            return;
        }
        bool isCreated = await AuthService.RegisterAsync(input.Name, input.Surname, input.Email, input.Username, input.Password, "Guest");
        if (isCreated)
        {
            message = "Account has been successfully created!";
            messageColor = Color.Success;
            input = new InputInfo();
            _loading = false;
        }
        else
        {
            message = "An error occurred while creating the account.";
            messageColor = Color.Error;
            _loading = false;
        }
    }

    protected class InputInfo
    {
        public string Name { get; set; }
        public string Surname { get; set; }
        public string Email { get; set; }
        public string Username { get; set; }
        public string Password { get; set; }

        public InputInfo()
        {
            Name = "";
            Surname = "";
            Email = "";
            Username = "";
            Password = "";
        }
    }
}