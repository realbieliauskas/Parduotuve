@using Parduotuve.Data.Repositories
@using Parduotuve.Data.Entities
@using System.ComponentModel.DataAnnotations;
@inject IChromaRepository _chromaRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@page "/ChromaEdit/{SkinId:int}/{Id:int}/{SecretParam?}"

@if (SecretParam == null || !SecretParam.Equals(AdminLoginPage.Secret))
{
    <MudText Typo="Typo.h5" Color="Color.Error">You do not have permission to view this page</MudText>
    return;
}
<script>
    window.goBack = () => {
        history.back();
    };
</script>

<MudContainer>
    <MudText Typo="Typo.h4" Align="Align.Center">@chroma.Name @chroma.Skin.Name</MudText>
    
    <MudButton Color="Color.Default" OnClick="@(() => JS.InvokeVoidAsync("goBack"))">Go Back</MudButton>
    
    <EditForm Model="viewModel" OnValidSubmit="UpdateChroma">
        <DataAnnotationsValidator />
        <MudGrid>
            <MudItem xs="12" sm="6" md="3">
                <MudTextField Label="Name" Required="true" @bind-Value="viewModel.Name" />
                <ValidationMessage For="@(() => viewModel.Name)" />
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudTextField Label="Price" Required="true" @bind-Value="viewModel.Price" />
                <ValidationMessage For="@(() => viewModel.Price)" />
            </MudItem>
            <MudItem xs="12">
                <MudTextField Label="Splash URL" Required="true" @bind-Value="viewModel.URL" />
                <ValidationMessage For="@(() => viewModel.URL)" />
            </MudItem>
        </MudGrid>
        
        <MudButton Color="Color.Primary" OnClick="ShowHideRegularSplash">@RegularSplashButtonText</MudButton>
        
        @if (!RegularSplashButtonText.Equals(defaultButtonState))
        {
            <MudImage Src="@viewModel.URL" Alt="Chroma image" Style="width:100%;"/>
        }
        
        <MudButton Color="Color.Secondary" OnClick="UpdateChroma" Class="mt-4">Update Chroma</MudButton>
    </EditForm>
</MudContainer>

@code {
    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public string? SecretParam { get; set; }
    [Parameter]
    public int SkinId { get; set; }
    Chroma chroma;
    Clone viewModel;
    private const string defaultButtonState = "Show image";
    private string RegularSplashButtonText;
    
    protected override async Task OnInitializedAsync()
    {
        await GetChroma();
    }

    protected async Task GetChroma()
    {
        RegularSplashButtonText = defaultButtonState;
        chroma = await _chromaRepository.GetByIdAsync(Id);
        viewModel = new Clone(chroma);
    }

    public void UpdateChroma()
    {
        if (ValidateUpdate())
        {
            viewModel.UpdateChroma(chroma);
            _chromaRepository.UpdateAsync(chroma);
        }
    }

    public void ShowHideRegularSplash()
    {
        RegularSplashButtonText = RegularSplashButtonText.Equals(defaultButtonState) ? "Hide image" : defaultButtonState;
    }

    public bool ValidateUpdate()
    {
        return !string.IsNullOrEmpty(viewModel.Name) &&
               !string.IsNullOrEmpty(viewModel.URL) &&
               !string.IsNullOrEmpty(viewModel.Price);
    }

    public class Clone
    {
        [Required(ErrorMessage = "Chroma name is required")]
        public string Name { get; set; }
        [Required(ErrorMessage = "The loading screen splash art URL is required")]
        public string URL { get; set; }
        [Required(ErrorMessage = "Price is required")]
        public string Price { get; set; }

        public Clone(Chroma chroma)
        {
            Name = chroma.Name;
            URL = chroma.URL;
            Price = chroma.Price;
        }

        public void UpdateChroma(Chroma chroma)
        {
            chroma.Name = Name;
            chroma.URL = URL;
            chroma.Price = Price;
        }
    }
}