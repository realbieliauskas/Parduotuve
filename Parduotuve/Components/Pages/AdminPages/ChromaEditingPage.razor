@inject IChromaRepository ChromaRepository
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@inject AuthService AuthService
@page "/ChromaEdit/{SkinId:int}/{Id:int}/"
@using System.ComponentModel.DataAnnotations
@using Parduotuve.Data.Entities
@using Parduotuve.Data.Repositories
@using Parduotuve.Services

@if (!AuthService.IsAdmin)
{
    <MudText Typo="Typo.h5" Color="Color.Error">You do not have permission to view this page</MudText>
    return;
}
<script>
    window.goBack = () => {
        history.back();
    };
</script>

<MudContainer>
    <MudText Typo="Typo.h4" Align="Align.Center">@_chroma.Name @_chroma.Skin.Name</MudText>

    <MudButton Color="Color.Default" OnClick="@(() => JsRuntime.InvokeVoidAsync("goBack"))">Go Back</MudButton>

    <EditForm Model="_viewModel" OnValidSubmit="UpdateChroma">
        <DataAnnotationsValidator/>
        <MudGrid>
            <MudItem xs="12" sm="6" md="3">
                <MudTextField Label="Name" Required="true" @bind-Value="_viewModel.Name"/>
                <ValidationMessage For="@(() => _viewModel.Name)"/>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudTextField Label="Price" Required="true" @bind-Value="_viewModel.Price"/>
                <ValidationMessage For="@(() => _viewModel.Price)"/>
            </MudItem>
            <MudItem xs="12">
                <MudTextField Label="Splash URL" Required="true" @bind-Value="_viewModel.Url"/>
                <ValidationMessage For="@(() => _viewModel.Url)"/>
            </MudItem>
        </MudGrid>

        <MudButton Color="Color.Primary" OnClick="ShowHideRegularSplash">@_regularSplashButtonText</MudButton>

        @if (!_regularSplashButtonText.Equals(DefaultButtonState))
        {
            <MudImage Src="@_viewModel.Url" Alt="Chroma image" Style="width:100%;"/>
        }

        <MudButton Color="Color.Secondary" OnClick="UpdateChroma" Class="mt-4">Update Chroma</MudButton>
    </EditForm>
</MudContainer>

@code {
    [Parameter] public int Id { get; set; }
    [Parameter] public int SkinId { get; set; }
    Chroma _chroma;
    Clone _viewModel;
    private const string DefaultButtonState = "Show image";
    private string _regularSplashButtonText;

    protected override async Task OnInitializedAsync()
    {
        await GetChroma();
    }

    protected async Task GetChroma()
    {
        _regularSplashButtonText = DefaultButtonState;
        _chroma = await ChromaRepository.GetByIdAsync(Id);
        _viewModel = new Clone(_chroma);
    }

    public void UpdateChroma()
    {
        if (ValidateUpdate())
        {
            _viewModel.UpdateChroma(_chroma);
            ChromaRepository.UpdateAsync(_chroma);
        }
    }

    public void ShowHideRegularSplash()
    {
        _regularSplashButtonText = _regularSplashButtonText.Equals(DefaultButtonState) ? "Hide image" : DefaultButtonState;
    }

    public bool ValidateUpdate()
    {
        return !string.IsNullOrEmpty(_viewModel.Name) &&
               !string.IsNullOrEmpty(_viewModel.Url) &&
               !string.IsNullOrEmpty(_viewModel.Price);
    }

    public class Clone
    {
        [Required(ErrorMessage = "Chroma name is required")]
        public string Name { get; set; }

        [Required(ErrorMessage = "The loading screen splash art URL is required")]
        public string Url { get; set; }

        [Required(ErrorMessage = "Price is required")]
        public string Price { get; set; }

        public Clone(Chroma chroma)
        {
            Name = chroma.Name;
            Url = chroma.Url;
            Price = chroma.Price;
        }

        public void UpdateChroma(Chroma chroma)
        {
            chroma.Name = Name;
            chroma.Url = Url;
            chroma.Price = Price;
        }
    }

}