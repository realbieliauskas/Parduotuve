@page "/AdminLogin"
@using Parduotuve.Data.Repositories
@using Parduotuve.Data.Entities
@using Parduotuve.Services
@inject ISkinRepository _skinRepository
@inject NavigationManager NavManager
@inject AuthService AuthService

<MudContainer MaxWidth="MaxWidth.ExtraSmall" Class="d-flex justify-center align-center min-vh-100 pa-5">
    <MudPaper Elevation="3" Class="pa-5" Style="border-radius: 12px; width: 100%;">
        <MudText Typo="Typo.h5" Class="mb-4 text-center">Login</MudText>

        <MudForm Model="@input" IsValid="@_isValid" @ref="form">
            <MudTextField Label="Username" @bind-Value="@input.Username" Required="true" RequiredError="Username is required." />
            <MudTextField Label="Password" @bind-Value="@input.Password" Required="true" RequiredError="Password is required." InputType="InputType.Password"/>

            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CheckSubmission" Disabled="@_loading" Class="mt-3" FullWidth>
                <MudProgressCircular Indeterminate="true" Size="Size.Large" Style="margin-right: 10px;" Hidden="!_loading" />
                Login
            </MudButton>
            <MudText Color="Color.Error">@ErrorMessage</MudText>
            <MudLink Href="/Account_creation">Don't have an account?</MudLink>
        </MudForm>
    </MudPaper>
</MudContainer>

    @if (!string.IsNullOrEmpty(message))
    {
        <p class="@messageClass">@message</p>
    }
</div>

@code {
    private InputInfo input = new InputInfo();
    private MudForm form;
    private bool _loading = false;
    private bool _isValid = false;
    public string ErrorMessage { get; set; } = "";
    private const string username = "alv";
    private const string password = "crz";
    public const string Secret = "dsfoiugnfdonhgfodinhdf";

    public async Task CheckSubmission()
    {
        _loading = true;
        ErrorMessage = "";
        await form.Validate();
        _isValid = form.IsValid;
        if(!_isValid)
        {
            _loading = false;
            return;
        }
        if (input.Username==username && input.Password==password)
        {
            AuthService.Set_admin();
            _loading = false;
            NavManager.NavigateTo($"/AdminPanel/{Secret}");
            return;
        }
        var user = await AuthService.LoginAsync(input.Username, input.Password);
        if (user != null)
        {
            AuthService.Set_Guest();
        }
        else
        {
            ErrorMessage = "Invalid username or password!";
        }
        _loading = false;
    }

    public void CreateAccount()
    {
        NavManager.NavigateTo("/Account_creation");
    }

    protected class InputInfo
    {
        public string Username { get; set; }
        public string Password { get; set; }

        public InputInfo()
        {
            Username = "";
            Password = "";
        }
    }
}