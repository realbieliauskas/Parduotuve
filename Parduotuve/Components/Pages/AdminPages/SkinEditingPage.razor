@inject ISkinRepository SkinRepository
@inject IChromaRepository ChromaRepository
@inject NavigationManager NavigationManager;
@inject IJSRuntime JsRuntime
@inject AuthService AuthService
@page "/SkinEdit/{Id:int}/"
@using System.ComponentModel.DataAnnotations
@using Parduotuve.Data.Entities
@using Parduotuve.Data.Repositories
@using Parduotuve.Services


@if (!AuthService.IsAdmin)
{
    <MudText Typo="Typo.h5" Color="Color.Error">You do not have permission to view this page</MudText>
    return;
}
<script>
    window.goBack = () => {
        history.back();
    };
</script>

<MudContainer>
    <MudCard>
        <MudCardContent>
            <MudText Typo="Typo.h4" Align="Align.Center">@_skin.Name</MudText>
            <MudButton Variant="Variant.Outlined" OnClick="@(() => JsRuntime.InvokeVoidAsync("goBack"))">Go Back</MudButton>
        </MudCardContent>
    </MudCard>
</MudContainer>

<MudForm Model="_viewModel" OnValidSubmit="UpdateSkin">
    <MudTextField Label="Name" @bind-Value="_viewModel.Name" Required="true"/>
    <MudTextField Label="Price" @bind-Value="_viewModel.Price" Required="true" Type="number"/>
    <MudTextField Label="Splash URL" @bind-Value="_viewModel.SplashUrl" Required="true"/>
    <MudTextField Label="Cinematic Splash URL" @bind-Value="_viewModel.CinematicSplashUrl" Required="true"/>
    <MudTextField Label="Quote" @bind-Value="_viewModel.Quote" Multiline="true"/>
    <MudButton OnClick="UpdateSkin" Color="Color.Secondary">Update Skin</MudButton>
</MudForm>

<MudButton Color="Color.Primary" OnClick="() => _chromaAdditionPopupIsOpen = true">Add Chroma</MudButton>

<MudDialog Visible="@_chromaAdditionPopupIsOpen" cl OnClose="() => chromaAdditionPopupIsOpen = false">
    <TitleContent>Add New Chroma</TitleContent>
    <DialogContent>
        <MudForm Model="_newChromaPlaceholder" OnValidSubmit="AddChroma">
            <MudTextField Label="Chroma Name" @bind-Value="_newChromaPlaceholder.Name" Required="true"/>
            <MudTextField Label="Chroma Splash Art URL" @bind-Value="_newChromaPlaceholder.Url" Required="true"/>
            <MudTextField Label="Chroma Price" @bind-Value="_newChromaPlaceholder.Price" Required="true" Type="number"/>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Secondary" OnClick="() => _chromaAdditionPopupIsOpen = false">Close</MudButton>
        <MudButton Color="Color.Primary" OnClick="AddChroma">Add Chroma</MudButton>
    </DialogActions>
</MudDialog>

@if (_chromas != null)
{
    <MudGrid>
        @foreach (Chroma? chroma in _chromas)
        {
            <MudItem>
                <MudPaper>
                    <MudImage Src="@chroma.Url" Alt="@chroma.Name"/>
                    <MudButton Color="Color.Error" OnClick="() => OpenChromaDeletionQuestion(chroma.Id)">Delete
                    </MudButton>
                    <MudButton Color="Color.Secondary"
                               OnClick="() => GoToChromaEditingPage(chroma.Id)">@chroma.Name</MudButton>
                </MudPaper>
            </MudItem>
        }
    </MudGrid>
}

@code {
    [Parameter] public int Id { get; set; }
    Skin _skin = null!;
    Clone _viewModel = null!;
    readonly Chroma _newChromaPlaceholder = new();
    private List<Chroma> _chromas = null!;
    private bool _chromaAdditionPopupIsOpen;

    protected override async Task OnInitializedAsync()
    {
        await GetSkin();
    }

    public async Task GetSkin()
    {
        _skin = await SkinRepository.GetByIdAsync(Id) ?? throw new InvalidOperationException();
        _viewModel = new Clone(_skin);
        _chromas = _skin.ChromaList?.ToList() ?? new List<Chroma>();
    }

    public async Task UpdateSkin()
    {
        if (ValidateUpdate())
        {
            _viewModel.UpdateSkin(_skin);
            await SkinRepository.UpdateAsync(_skin);
        }
    }

    public void GoToChromaEditingPage(int id)
    {
        NavigationManager.NavigateTo($"/ChromaEdit/{this.Id}/{id}");
    }

    public bool ValidateUpdate()
    {
        return _viewModel.Price.HasValue &&
               !string.IsNullOrEmpty(_viewModel.Name) &&
               !string.IsNullOrEmpty(_viewModel.SplashUrl) &&
               !string.IsNullOrEmpty(_viewModel.CinematicSplashUrl) &&
               !string.IsNullOrEmpty(_viewModel.Quote);
    }

    public async Task OpenChromaDeletionQuestion(int id)
    {
        await ChromaRepository.GetByIdAsync(id);
    }

    public void AddChroma()
    {
        Chroma newChroma = new(_newChromaPlaceholder)
        {
            Id = ChromaRepository.GetLast().Result.Id + 1,
            Skin = _skin
        };
        ChromaRepository.AddAsync(newChroma).Wait();
        NavigationManager.NavigateTo(NavigationManager.Uri, true);
    }

    public class Clone
    {
        [Required(ErrorMessage = "Skin name is required")]
        public string? Name { get; set; }

        [Required(ErrorMessage = "The loading screen splash art URL is required")]
        public string? SplashUrl { get; set; }

        [Required(ErrorMessage = "The cinematic splash art URL is required")]
        public string? CinematicSplashUrl { get; set; }

        [Required(ErrorMessage = "Price is required")]
        public double? Price { get; set; }

        public string? Quote { get; set; }

        public Clone(Skin skin)
        {
            Name = skin.Name;
            SplashUrl = skin.SplashUrl;
            CinematicSplashUrl = skin.CinematicSplashUrl;
            Price = skin.Price;
            Quote = skin.Quote;
        }

        public void UpdateSkin(Skin skin)
        {
            skin.Name = Name;
            skin.SplashUrl = SplashUrl;
            skin.CinematicSplashUrl = CinematicSplashUrl;
            skin.Price = Price;
            skin.Quote = Quote;
        }
    }

}