@page "/AdminPanel/"
@using Parduotuve.Data.Repositories
@using Parduotuve.Data.Entities
@using Parduotuve.Services
@inject ISkinRepository _skinRepository
@inject IChromaRepository _chromaRepository
@inject NavigationManager NavManager
@inject ISnackbar Snackbar
@inject AuthService AuthService

@if (!AuthService.IsAdmin)
{
    <h3>You do not have permission to view this page</h3>
    return;
}
@if (popupIsOpen)
{
    <MudCard>
        <MudCardHeader>
            <MudCardHeader>Add New Skin</MudCardHeader>
            <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Primary" OnClick="ClosePopup" />
        </MudCardHeader>
        <EditForm Model="@this" OnValidSubmit="AddSkin">
            <DataAnnotationsValidator />
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudTextField Label="Champion Name" Required="true" @bind-Value="newSkin.ChampionName" />
                    </MudItem>
                    <MudItem xs="12" sm="6">
                        <MudTextField Label="Skin Name" Required="true" @bind-Value="newSkin.Name" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField Label="Loading Screen Art URL" Required="true" @bind-Value="newSkin.SplashUrl" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField Label="Cinematic Art URL" Required="true" @bind-Value="newSkin.CinematicSplashUrl" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField Label="Price" Required="true" Type="number" @bind-Value="newSkin.Price" />
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField Label="Quote" @bind-Value="newSkin.Quote" />
                    </MudItem>
                </MudGrid>

                @if (newChromas.Count > 0)
                {
                    <MudText Typo="Typo.h6">Chromas:</MudText>
                    <MudList T="MudListItem<MudText>">
                        @foreach (var (chroma, index) in newChromas.Select((value, i) => (value, i)))
                        {
                            <MudListItem>
                                <MudText>@(index + 1). @chroma.Name</MudText>
                            </MudListItem>
                        }
                    </MudList>
                }
            </MudCardContent>

            @if (chromaBoxIsOpen)
            {
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="12">
                            <MudTextField Label="Chroma Name" Required="true" @bind-Value="newChroma.Name" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField Label="Chroma Price" Required="true" @bind-Value="newChroma.Price" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField Label="Splash Art URL" Required="true" @bind-Value="newChroma.URL" />
                        </MudItem>
                    </MudGrid>
                    <MudButton Color="Color.Primary" OnClick="AddChroma">Add Chroma</MudButton>
                </MudCardContent>
            }

            <MudCardActions>
                <MudButton Variant="Variant.Outlined" Color="Color.Info" OnClick="ToggleChromaBox">@chromaBoxButtonMessage</MudButton>
                <MudSpacer />
                <MudButton Color="Color.Secondary" OnClick="ClosePopup">Close</MudButton>
                <MudButton OnClick="AddSkin" Color="Color.Primary">Add Skin</MudButton>
            </MudCardActions>
        </EditForm>
    </MudCard>
}

<MudText Typo="Typo.h4">Admin Control Page</MudText>
<MudButton Color="Color.Primary" OnClick="OpenPopup">Add Skin</MudButton>

<MudGrid>
    @foreach (var skin in GetPageContents())
    {
        if (skins.Contains(skin))
        {
            <MudItem xs="12" sm="6" md="4">
                <MudCard>
                    <MudCardContent>
                        <MudText>@skin.Name</MudText>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Color="Color.Secondary" OnClick="() => GoToSkinEditingPage(skin)">Edit</MudButton>
                        <MudButton Color="Color.Error" OnClick="() => DeleteSkin(skin)">Delete</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
        }
    }
</MudGrid>

<div class="d-flex flex-column align-center">
    <MudPagination BoundaryCount="2" MiddleCount="5" Count="@PageCount" Selected="@Page" SelectedChanged="@((page) => NavToPage(page))" Class="mt-4" />
</div>


@code {
    List<Skin> skins = new List<Skin>();
    Skin clickedSkin = new Skin();
    Skin newSkin = new Skin();
    List<Chroma> newChromas = new List<Chroma>();
    Chroma newChroma = new Chroma();
    private bool popupIsOpen = false;
    private bool chromaBoxIsOpen = false;
    private string chromaBoxButtonMessage = "Show Chroma box";

    [SupplyParameterFromQuery]
    [Parameter]
    public int Page { get; set; }
    private static int ItemsPerPage = 12;
    private int PageCount { get { return skins.Chunk(ItemsPerPage).ToArray().Length; } }

    protected override async Task OnInitializedAsync()
    {
        if (Page <= 0) { Page = 1; }
        await GetSkins();
    }

    public async Task GetSkins()
    {
        skins = (List<Skin>)(await _skinRepository.GetAllAsync());
    }

    public void GoToSkinEditingPage(Skin skin)
    {
        NavManager.NavigateTo($"/SkinEdit/{skin.Id}/");
    }

    public void DeleteSkin(Skin skin)
    {
        skins.Remove(skin);
        _skinRepository.DeleteAsync(skin.Id);
    }

    public void OpenPopup()
    {
        popupIsOpen = true;
    }

    public void ClosePopup()
    {
        popupIsOpen = false;
        newSkin = new Skin();
        CloseChromaBox();
    }

    public void AddSkin()
    {
        if(CheckIfSkinIsValid())
        {
            int newId = skins.Last().Id + 1;
            newSkin.Id = newId;
            newSkin.ChromaList = newChromas;
            _skinRepository.AddAsync(newSkin);
            NavManager.NavigateTo(NavManager.Uri, true);
        }
    }

    public bool CheckIfSkinIsValid()
    {
        return newSkin.Price.HasValue &&
               !String.IsNullOrEmpty(newSkin.Name) &&
               !String.IsNullOrEmpty(newSkin.SplashUrl) &&
               !String.IsNullOrEmpty(newSkin.CinematicSplashUrl) &&
               !String.IsNullOrEmpty(newSkin.ChampionName);
    }

    public void ToggleChromaBox()
    {
        if (chromaBoxIsOpen)
        {
            chromaBoxIsOpen = false;
            chromaBoxButtonMessage = "Show Chroma Box";
        }
        else
        {
            chromaBoxIsOpen = true;
            chromaBoxButtonMessage = "Hide Chroma Box";
        }
    }

    public void CloseChromaBox()
    {
        chromaBoxIsOpen = false;
        newChroma = new Chroma();
        newChromas = new List<Chroma>();
    }

    public void AddChroma()
    {
        if(CheckIfChromaIsValid())
        {

            newChroma.Skin = newSkin;
            int newId = _chromaRepository.GetLast().Id + 1;
            newChroma.Id = newId;
            Chroma temp = new Chroma(newChroma);
            newChromas.Add(temp);
        }
    }

    public bool CheckIfChromaIsValid()
    {
        return !String.IsNullOrEmpty(newChroma.Name) &&
               !String.IsNullOrEmpty(newChroma.URL) &&
               !String.IsNullOrEmpty(newChroma.Price);
    }
    private IEnumerable<Skin> GetPageContents()
    {
        int tempPage = Page;
        if (Page <= 0)
            tempPage = 1;
        if (Page > PageCount)
            tempPage = PageCount;
        if (tempPage == 0)
            return Array.Empty<Skin>();

        return skins.Chunk(ItemsPerPage).ToArray()[tempPage - 1];
    }
    private void NavToPage(int page)
    {
        string pagedUri = NavManager.GetUriWithQueryParameter("Page", page);
        NavManager.NavigateTo(pagedUri, false);
    }
}