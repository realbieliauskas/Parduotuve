@using Parduotuve.Services
@using Parduotuve.Data.Repositories
@using Parduotuve.Data.Entities
@page "/Shopping_cart"
@rendermode InteractiveServer
@inject Shopping_Cart_Service ShoppingCart
@inject NavigationManager Navigator
@inject ISkinRepository _skinRepository

<MudText Typo="Typo.h4" GutterBottom>Shopping Cart</MudText>
    
@if (ShoppingCart.IsEmpty())
{
    <MudAlert Severity="Severity.Info">Your shopping cart is empty. Go to the browse page and order what you want.</MudAlert>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Navitage_to_Browse">Browse</MudButton>
}
else
{
    <MudSimpleTable>
        <MudTHeadRow>
            <MudTh>Name</MudTh>
            <MudTh>Price</MudTh>
            <MudTh>Quantity</MudTh>
            <MudTh>Increase</MudTh>
            <MudTh>Decrease</MudTh>
            <MudTh>Total</MudTh>
        </MudTHeadRow>
        <tbody>
            @foreach (var item in ShoppingCart)
            {
                Skin skin = GetSkin(item.Key);
                if (skin != null)
                {
                    <MudTr>
                        <MudTd>@skin.Name</MudTd>
                        <MudTd>@skin.Price €</MudTd>
                        <MudTd>@item.Value</MudTd>
                        <MudTd>
                            <MudButton Variant="Variant.Outlined" Color="Color.Success" OnClick="() => IncreaseQuantity(item.Key)">+</MudButton>
                        </MudTd>
                        <MudTd>
                            <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="() => DecreaseQuantity(item.Key)">-</MudButton>
                        </MudTd>
                        <MudTd>@Total(skin.Price, item.Value) €</MudTd>
                    </MudTr>
                }
            }
        </tbody>
    </MudSimpleTable>
    <MudText Typo="Typo.h4">Total: @Total() €</MudText>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleCheckout">Proceed to Checkout</MudButton>
}


@code {

    private IEnumerable<Skin> Skins { get; set; }


    protected override async Task OnInitializedAsync()
    {
        Skins = await _skinRepository.GetAllAsync();

    }

    private async Task IncreaseQuantity(int id)
    {
        ShoppingCart.Increase(id);
        await InvokeAsync(StateHasChanged);
    }


    private async Task DecreaseQuantity(int id)
    {
        ShoppingCart.Decrease(id);
        await InvokeAsync(StateHasChanged);
    }
    private double? GetTotalPrice()
    {
        double? sum = 0;
        foreach(var item in ShoppingCart)
        {
            Skin skin = GetSkin(item.Key);
            if (skin.Price!=null)
            {
                sum += skin.Price * item.Value;
            }
        }
        return sum;
    }

    private void HandleCheckout()
    {
        string cartString = "";
        foreach (var item in ShoppingCart)
        {
            for (int x = 0; x < item.Value; x++)
            {
                cartString += item.Key.ToString()+"&";
            }
        }
        cartString = cartString.TrimEnd('&');
        Navigator.NavigateTo("/Checkout/" + cartString + "/");
    }
    private Skin GetSkin(int id)
    { 
        foreach(var item in Skins)
        {
            if (item.Id==id)
            {
                return item;
            }
        }
        return null;
    }
    private string Total()
    {
        return $"{GetTotalPrice():f2}";
    }
    private async Task Navitage_to_Browse ()
    {
        Navigator.NavigateTo("/Browse");
        await InvokeAsync(StateHasChanged);
    }
    private string Total(double? price, int quantity)
    {
        return $"{price*quantity:f2}";
    }
}