@page "/order-complete/{OrderId}"
@using System.Text
@using Parduotuve.Data.Entities
@using Parduotuve.Data.Repositories
@using Parduotuve.Services
@inject IOrderRepository OrderRepository
@inject IJSRuntime JsRuntime
@inject AuthService AuthService

<script>
    window.downloadFileFromStream = async (fileName, contentStreamReference) => {
        const arrayBuffer = await contentStreamReference.arrayBuffer();
        const blob = new Blob([arrayBuffer]);
        const url = URL.createObjectURL(blob);
        const anchorElement = document.createElement('a');
        anchorElement.href = url;
        anchorElement.download = fileName ?? '';
        anchorElement.click();
        anchorElement.remove();
        URL.revokeObjectURL(url);
    }
</script>
<MudText Typo="Typo.h4" Class="d-flex align-center" Color="@OrderMessageColor">@OrderMessage</MudText>

@code {
    [Parameter] public string OrderId { get; set; }
    private string OrderMessage { get; set; } = string.Empty;
    private Color OrderMessageColor { get; set; } = Color.Primary;
    private bool _downloadInitiated;

    protected override async Task OnInitializedAsync()
    {
        Order? order = await OrderRepository.GetOrderById(OrderId);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        Order? order = await OrderRepository.GetOrderById(OrderId);
        if (order == null)
        {
            OrderMessage = "No order found";
            OrderMessageColor = Color.Error;
            StateHasChanged();
            return;
        }

        if (order.User != null && (!AuthService.IsLoggedIn || AuthService.CurrentUser!.Id != order.User.Id))
        {
            OrderMessage = "You do not have permission to view this page.";
            OrderMessageColor = Color.Error;
            StateHasChanged();
            return;
        }

        if (order.IsCompleted)
        {
            OrderMessage = "Your purchase was completed successfully! You will soon receive your goods via file download.";
            OrderMessageColor = Color.Success;
            StateHasChanged();
            if (_downloadInitiated)
                return;
            _downloadInitiated = true;
            Stream fileStream = await GetFileStream();
            string fileName = "wares.txt";

            using DotNetStreamReference streamRef = new(fileStream);

            await JsRuntime.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
            return;
        }

        OrderMessage = "Your purchase is still pending or has failed. Please try reloading the page once the checkout process has concluded.";
        OrderMessageColor = Color.Secondary;
        StateHasChanged();
    }

    private async Task<Stream> GetFileStream()
    {
        string contents = "";
        IEnumerable<OrderItem?> orderItems = await OrderRepository.GetOrderItemsByOrderId(OrderId);

        contents += "You are hereby the real owner of the following purchased goods:\n";
        foreach (OrderItem? entry in orderItems)
        {
            if (entry == null)
                continue;
            for (int x = 0; x < entry.Amount; x++)
            {
                contents += entry.Skin.Name + "\n";
            }
        }

        byte[] contentBytes = Encoding.UTF8.GetBytes(contents);

        MemoryStream memoryStream = new(contentBytes);

        return memoryStream;
    }

}