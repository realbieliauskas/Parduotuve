@page "/Cart"
@rendermode InteractiveServer
@inject ShoppingCartService ShoppingCart
@inject NavigationManager NavManager
@inject ISkinRepository SkinRepository
@inject IOrderRepository OrderRepository
@inject AuthService AuthService
@inject IStripeService StripeService
@using System.Security.Cryptography
@using System.Text
@using Parduotuve.Data.Entities
@using Parduotuve.Data.Repositories
@using Parduotuve.Services
@using Stripe.Checkout

<MudText Typo="Typo.h4" GutterBottom>Shopping Cart</MudText>

@if (ShoppingCart.IsEmpty())
{
    <MudAlert Severity="Severity.Info">Your shopping cart is empty. Go to the browse page and order what you want.
    </MudAlert>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/">Browse</MudButton>
}
else
{
    <MudCard>
        <MudSimpleTable>
            <MudTHeadRow>
                <MudTh>Name</MudTh>
                <MudTh>Price</MudTh>
                <MudTh>Quantity</MudTh>
                <MudTh>Increase</MudTh>
                <MudTh>Decrease</MudTh>
                <MudTh>Total</MudTh>
            </MudTHeadRow>
            <tbody>
            @foreach (KeyValuePair<int, int> item in ShoppingCart)
            {
                Skin skin = GetSkin(item.Key);
                <MudTr>
                    <MudTd>@skin.Name</MudTd>
                    <MudTd>@skin.Price €</MudTd>
                    <MudTd>@item.Value</MudTd>
                    <MudTd>
                        <MudButton Variant="Variant.Outlined" Color="Color.Success"
                                   OnClick="() => IncreaseQuantity(item.Key)">+
                        </MudButton>
                    </MudTd>
                    <MudTd>
                        <MudButton Variant="Variant.Outlined" Color="Color.Error"
                                   OnClick="() => DecreaseQuantity(item.Key)">-
                        </MudButton>
                    </MudTd>
                    <MudTd>@Total(skin.Price, item.Value) €</MudTd>
                </MudTr>
            }
            </tbody>
        </MudSimpleTable>
        <MudText Typo="Typo.h4">Total: @Total() €</MudText>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="HandleCheckout" Style="width:200px">Proceed
            to Checkout
        </MudButton>
        @if (Loading)
        {
            <MudOverlay Visible="true" DarkBackground="true" Absolute="true">
                <MudProgressCircular Color="Color.Secondary" Indeterminate="true"/>
            </MudOverlay>
        }
    </MudCard>
}


@code {

    private IEnumerable<Skin> Skins { get; set; } = null!;
    private bool Loading { get; set; }


    protected override async Task OnInitializedAsync()
    {
        Skins = await SkinRepository.GetAllAsync();
    }

    private async Task IncreaseQuantity(int id)
    {
        ShoppingCart.Increase(id);
        await InvokeAsync(StateHasChanged);
    }


    private async Task DecreaseQuantity(int id)
    {
        ShoppingCart.Decrease(id);
        await InvokeAsync(StateHasChanged);
    }

    private double? GetTotalPrice()
    {
        double? sum = 0;
        foreach (KeyValuePair<int, int> item in ShoppingCart)
        {
            Skin skin = GetSkin(item.Key);
            if (skin.Price != null)
            {
                sum += skin.Price * item.Value;
            }
        }

        return sum;
    }

    private static readonly Dictionary<double, string> StripePriceIDs = new()
    {
        { 9.99, "price_1R9V8TCeO2Ku9PZcbDIXGUFs" },
        { 14.99, "price_1R9V93CeO2Ku9PZcxNQmsdiS" },
        { 19.99, "price_1R9V9WCeO2Ku9PZcY1k8PM1M" },
        { 49.99, "price_1R9V9wCeO2Ku9PZcuZyiDTlc" },
        { 99.99, "price_1R9VB6CeO2Ku9PZcf6qgJkNn" }
    };

    private Task<string> GetPurchaseHash()
    {
        string purchaseString = string.Empty;
        foreach (KeyValuePair<int, int> pair in ShoppingCart)
        {
            for (int x = 0; x < pair.Value; x++)
            {
                purchaseString += "item" + pair.Key;
            }
        }

        purchaseString += "time" + DateTime.UtcNow.Ticks;

        if (AuthService.CurrentUser != null)
        {
            purchaseString += AuthService.CurrentUser.Id;
        }
        byte[] purchaseStringBytes = ASCIIEncoding.ASCII.GetBytes(purchaseString);
        byte[] purchaseHashBytes = MD5.HashData(purchaseStringBytes);
        return Task.FromResult(ByteArrayToString(purchaseHashBytes));
    }

    private static string ByteArrayToString(byte[] arrInput)
    {
        int i;
        StringBuilder sOutput = new(arrInput.Length);
        for (i = 0; i < arrInput.Length; i++)
        {
            sOutput.Append(arrInput[i].ToString("X2"));
        }

        return sOutput.ToString();
    }

    /// <summary>
    ///     This method handles the event of clicking the confirm purchase button
    ///     It is responsible for performing verification and delivering the purchased items
    /// </summary>
    private async Task HandleCheckout()
    {
        Loading = true;
        StateHasChanged();
        List<SessionLineItemOptions> lineItems = new();
        Dictionary<string, string> metaItems = new();
        string hash = await GetPurchaseHash();
        foreach (KeyValuePair<int, int> pair in ShoppingCart)
        {
            Skin? skin = await SkinRepository.GetByIdAsync(pair.Key);
            if (skin == null)
            {
                continue;
            }

            SessionLineItemOptions option = new();
            option.Quantity = pair.Value;
            option.Price = StripePriceIDs.GetValueOrDefault(skin.Price ?? 99.99, StripePriceIDs.Values.Last());
            lineItems.Add(option);
            metaItems.Add(pair.Key.ToString(), pair.Value.ToString());
            await OrderRepository.AddOrderItem(new OrderItem { Amount = pair.Value, Id = 0, OrderId = hash, Skin = skin });
        }

        metaItems.Add("paymentHash", hash);

        string url = await StripeService.CreateCheckoutSessionAsync(lineItems, metaItems, NavManager.BaseUri + $"order-complete/{hash}", NavManager.BaseUri + "Checkout/failed");
        
        Order order = new()
        {
            Id = hash,
            IsCompleted = false,
            User = AuthService.CurrentUser
        };
        await OrderRepository.AddOrder(order);
        NavManager.NavigateTo(url);
        ShoppingCart.Clear();
        Loading = false;
    }

    private Skin GetSkin(int id)
    {
        foreach (Skin? item in Skins)
        {
            if (item.Id == id)
            {
                return item;
            }
        }

        return null;
    }

    private string Total()
    {
        return Math.Round(GetTotalPrice() ?? 0, 2).ToString();
    }

    private string Total(double? price, int quantity)
    {
        return $"{price * quantity:f2}";
    }

}