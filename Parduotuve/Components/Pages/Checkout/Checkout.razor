@page "/Checkout/{CartString}"
@using Parduotuve.Data.Entities
@using Parduotuve.Data.Repositories
@using System.Text;
@inject NavigationManager NavManager
@inject ISkinRepository _skinRepository
@inject IOrderRepository _orderRepository
@using Stripe.Checkout


@if (CartString!="thanks" && CartString != "failed")
{
    <h2>Your shopping cart:</h2>

    <table>
        <tr>
            <th>Name</th>
            <th>Amount</th>
            <th>Price</th>
        </tr>
        @foreach ((int, Skin) entry in Cart)
        {
            <tr>
                <td>@entry.Item2.Name</td>
                <td>@entry.Item1</td>
                <td>@(entry.Item2.Price * entry.Item1)</td>
            </tr>
        }
    </table>
    <style>
        table, th, td {
            border: 1px solid black;
            border-collapse: collapse;
            text-align: center;
            padding: 4px;
        }
    </style>

    <h2>Total price: @TotalPrice</h2>
    <MudButton OnClick="HandleCheckout">Finalize purchase</MudButton>
}
else if(CartString == "thanks")
{
    <h2>Thank you for your order!</h2>
    <h3>You will receive your real purchased goods through the means of a file download soon</h3>
}
else
{
    <h2>The purchase failed. Please try again.</h2>
}

@code {
    /// <summary>
    /// The string represenation of the customers' cart
    /// Items are represented by their IDs and separated with the '&' symbol
    /// If the cart contains X amount of an item, the ID of such an item would be repeated X times
    /// Example of a CartString: "1&1&1&2&3&5&6"
    /// In the case that the order was completed, the CartString would be "thanks" in order to display the thank you page, instead of the checkout page
    /// This will likely be replaced and deprecated in the future
    /// </summary>
    [Parameter]
    public string CartString { get; set; } = "";
    /// <summary>
    /// CartString is converted into a list of tuples where the first item represents the amount, while the second item represents the item itself
    /// </summary>
    public List<(int, Skin)> Cart { get; private set; } = new List<(int, Skin)>();
    private double? TotalPrice { get { return (double?)Math.Round((double)Cart.Select((e) => e.Item1 * e.Item2.Price).Sum(),2); } }

    protected override async Task OnInitializedAsync()
    {
        //Do not initialize if order was completed
        if(CartString == "thanks")
        {
            return;
        }

        //Conversion of CartString to Cart
        List<int> ids = CartString.Split('&').Select(str => int.Parse(str)).ToList();
        List<(int, int)> idCart = new List<(int, int)>();

        foreach(int id in ids)
        {
            int foundIndex = -1;
            for (int x = 0; x < idCart.Count; x++)
            {
                if(idCart[x].Item2 == id) {
                    foundIndex = x;
                    break;
                }
            }
            if(foundIndex > -1)
            {
                idCart[foundIndex] = (idCart[foundIndex].Item1+1, idCart[foundIndex].Item2);
            }
            else
            {
                idCart.Add((1, id));
            }
        }
        foreach((int, int) entry in idCart)
        {
            Skin? skin = await _skinRepository.GetByIdAsync(entry.Item2);

            if(skin == null)
            {
                continue;
            }

            Cart.Add((entry.Item1, skin));
        }
    }

    private static Dictionary<double, string> StripePriceIDs = new Dictionary<double, string>()
    {
        {9.99,"price_1R9V8TCeO2Ku9PZcbDIXGUFs"},
        {14.99, "price_1R9V93CeO2Ku9PZcxNQmsdiS"},
        {19.99, "price_1R9V9WCeO2Ku9PZcY1k8PM1M"},
        {49.99, "price_1R9V9wCeO2Ku9PZcuZyiDTlc"},
        {99.99, "price_1R9VB6CeO2Ku9PZcf6qgJkNn"},
    };
    private async Task<string> GetPurchaseHash()
    {
        string purchaseString = String.Empty;//I SITA REIKES PRIDETI USERIO ID KAI TAI BUS ACCESSIBLE
        foreach ((int, Skin) entry in Cart)
        {
            for (int x = 0; x < entry.Item1; x++)
            {
                purchaseString += "item" + entry.Item2.Id;
            }
        }
        purchaseString += "time" + DateTime.UtcNow.Ticks.ToString();

        byte[] purchaseStringBytes = ASCIIEncoding.ASCII.GetBytes(purchaseString);
        byte[] purchaseHashBytes = System.Security.Cryptography.MD5.HashData(purchaseStringBytes);
        return ByteArrayToString(purchaseHashBytes);
    }
    private static string ByteArrayToString(byte[] arrInput)
    {
        int i;
        StringBuilder sOutput = new StringBuilder(arrInput.Length);
        for (i = 0; i < arrInput.Length; i++)
        {
            sOutput.Append(arrInput[i].ToString("X2"));
        }
        return sOutput.ToString();
    }
    /// <summary>
    /// This method handles the event of clicking the confirm purchase button
    /// It is responsible for performing verification and delivering the purchased items
    /// </summary>
    private async Task HandleCheckout()
    {
        List<SessionLineItemOptions> lineItems = new List<SessionLineItemOptions>();
        Dictionary<string, string> metaItems = new Dictionary<string, string>();
        List<OrderItem> orderItems = new List<OrderItem>();
        string hash = await GetPurchaseHash();
        foreach ((int, Skin) entry in Cart)
        {
            var option = new SessionLineItemOptions();
            option.Quantity = entry.Item1;
            option.Price = StripePriceIDs.GetValueOrDefault<double,string>(entry.Item2.Price ?? 99.99, StripePriceIDs.Values.Last());
            lineItems.Add(option);
            metaItems.Add(entry.Item2.Id.ToString(), entry.Item1.ToString());
            orderItems.Add(new OrderItem() { Amount = entry.Item1, Id = 0, OrderId = hash, Skin = entry.Item2 });
        }
        metaItems.Add("paymentHash", hash);
        SessionCreateOptions options = new SessionCreateOptions()
            {
                LineItems = lineItems,
                Mode = "payment",
                SuccessUrl = NavManager.BaseUri + $"order-complete/{hash}",
                CancelUrl = NavManager.BaseUri + "Checkout/failed",
                Metadata = metaItems,
            };

        var service = new SessionService();
        var session = await service.CreateAsync(options);
        Order order = new Order()
        {
            Id = hash,
            IsCompleted = false,
            User = null,
        };
        await _orderRepository.AddOrder(order);
        NavManager.NavigateTo(session.Url);
    }
}
