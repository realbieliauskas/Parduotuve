@page "/Login"
@using Parduotuve.Data.Entities
@using Parduotuve.Data.Enums
@using Parduotuve.Data.Repositories
@using Parduotuve.Helpers.Wrappers
@using Parduotuve.Services
@inject ISkinRepository SkinRepository
@inject NavigationManager NavManager
@inject AuthService AuthService

<MudContainer MaxWidth="MaxWidth.ExtraSmall" Class="d-flex justify-center align-center min-vh-100 pa-5">
    <MudPaper Elevation="3" Class="pa-5" Style="border-radius: 12px; width: 100%;">
        <MudText Typo="Typo.h5" Class="mb-4 text-center">Login</MudText>

        <MudForm Model="@_input" IsValid="@_isValid" @ref="_form">
            <MudTextField Label="Username" @bind-Value="@_input.Username" Required="true"
                          RequiredError="Username is required."/>
            <MudTextField Label="Password" @bind-Value="@_input.Password" Required="true"
                          RequiredError="Password is required." InputType="InputType.Password"/>

            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CheckSubmission" Disabled="@_loading"
                       Class="mt-3" FullWidth>
                <MudProgressCircular Indeterminate="true" Size="Size.Large" Style="margin-right: 10px;"
                                     Hidden="!_loading"/>
                Login
            </MudButton>
            <MudText Color="Color.Error">@ErrorMessage</MudText>
            <MudLink Href="/Register">Don't have an account?</MudLink>
        </MudForm>
    </MudPaper>
</MudContainer>

@code {
    private readonly InputInfo _input = new();
    private MudForm _form = null!;
    private bool _loading;
    private bool _isValid;
    private string ErrorMessage { get; set; } = "";

    public async Task CheckSubmission()
    {
        _loading = true;
        ErrorMessage = "";
        await _form.Validate();
        _isValid = _form.IsValid;
        if (!_isValid)
        {
            _loading = false;
            return;
        }

        Result<User> loginResult = await AuthService.LoginAsync(_input.Username, _input.Password);
        if (!loginResult)
        {
            ErrorMessage = loginResult.Message;
            _loading = false;
            return;
        }

        _loading = false;
        NavManager.NavigateTo(loginResult.Value.Role.Equals(UserRole.Admin) ? "/AdminPanel" : "/");
        StateHasChanged();
    }

    protected class InputInfo
    {
        public string Username { get; set; } = "";
        public string Password { get; set; } = "";
    }

}