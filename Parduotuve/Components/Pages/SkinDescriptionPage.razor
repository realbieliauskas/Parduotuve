@using Parduotuve.Data.Repositories
@using Parduotuve.Data.Entities
@using System.Diagnostics
@using MudBlazor
@inject ISkinRepository _skinRepository
@page "/Description/{SkinID}"

<MudText Typo="Typo.h3">@skin.Name</MudText>
<MudSpacer />


<MudPaper Style="padding:10px;display:flex;float:left">
        <!-- Cinematic splash art-->
        <MudImage Src=@skin.CinematicSplashUrl Alt="@($"Image of {skin.Name}")" style="width:50%;height:auto"/>
        <!-- Skin quote-->
    <MudText Style="width:60%;align-content:center;margin-left:20px;float:left">
            <i>@skin.Quote</i>
        </MudText>
        <!-- TODO make RP and release date attributes of Skin class -->
        <MudContainer style="position:relative;margin-left:20px">
            <!-- Skin RP cost-->
            <MudText Style="float:left;position:absolute;left:0;width:105px">
                <b>In-game cost:</b> 1820 RP
            </MudText>

            <!-- Release date-->
            <MudText Style="float:left;position:absolute;left:0;bottom:0;width:105px">
                <b>Released on:</b> 2020-08-06
            </MudText>
        </MudContainer>
</MudPaper>

<MudPaper Style="display:flex;float:left;margin:10px;margin-left:0px;flex-wrap:wrap">
    <!-- Shows skin chromas and their RP costs-->
    @if(chromas != null)
    {
        @foreach(Chroma chroma in chromas)
        {
            <MudCard Style="margin:10px" Outlined="true">
                <MudImage Src="@chroma.URL" Alt="Chroma image"/>
                <MudCardContent Style="border:1px solid #4f4f4f;border-radius:4px;margin:5px">
                    <MudText Style="float:left">@chroma.Name</MudText>
                    <MudText Style="text-align:right">@(int.TryParse(@chroma.Price, out int ignor) ? chroma.Price + "RP" : chroma.Price)</MudText>
                </MudCardContent>
            </MudCard>
        }
    }
</MudPaper>



@code {
    [Parameter]
    public string SkinID { get; set; }
    private Skin skin;
    private List<Chroma> chromas;

    protected override async Task OnInitializedAsync()
    {
        await GetSkinObj();
    }

    public async Task GetSkinObj()
    {
        TextWriterTraceListener writer = new TextWriterTraceListener(System.Console.Out);
        int param = -1;
        if(!int.TryParse(SkinID,out param))
            return;
        Skin? toAssign = await _skinRepository.GetByIdAsync(param);
        if (toAssign == null)
            return;
        skin = toAssign;

        if(skin.ChromaList != null)
            chromas = skin.ChromaList.ToList();
    }
}
