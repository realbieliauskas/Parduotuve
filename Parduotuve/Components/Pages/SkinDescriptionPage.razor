@inject ISkinRepository SkinRepository
@page "/Description/{SkinID}/"
@using System.Diagnostics
@using Parduotuve.Data.Entities
@using Parduotuve.Data.Repositories
@using Parduotuve.Services
@inject ShoppingCartService ShoppingCart
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager;
@inject IJSRuntime JsRuntime

<script>
    window.goBack = () => {
        history.back();
    };
</script>

@if (_skin == null)
{
    <MudText Typo="Typo.h3">No such skin found.</MudText>
    return;
}

<MudText Typo="Typo.h3">@_skin.Name</MudText>
<MudSpacer/>


<MudPaper Style="padding:10px;display:flex;float:left">
    <!-- Cinematic splash art-->
    <MudImage Src="@_skin.CinematicSplashUrl" Alt="@($"Image of {_skin.Name}")" style="width:50%;height:auto"/>
    <!-- Skin quote-->
    <MudText Style="width:20%;align-content:center;margin-left:20px;float:left">
        <i>@_skin.Quote</i>
    </MudText>
    <!-- TODO make RP and release date attributes of Skin class -->
    <MudContainer style="margin-left:20px;width:250px">
        <!-- Skin RP cost      position:absolute;left:0 -->
        <MudText Style="margin-bottom:100px">
            <b>In-game cost:</b> @_skin.PriceRP
        </MudText>
        <!-- Release date-->
        <MudText Style="margin-bottom:279px">
            <b>Released on:</b> @_skin.ReleaseDate.ToShortDateString()
        </MudText>
        <MudButton Variant="Variant.Outlined" Color="Color.Primary" @onclick="@(() => AddToCart(_skin.Id))">Add to cart
        </MudButton>
        <MudText Style="margin-top:10px;margin-bottom:10px">or</MudText>
        <MudButton Variant="Variant.Outlined" OnClick="() => GoToBrowsePage()">Lets see another</MudButton>
    </MudContainer>
</MudPaper>

@if (_chromas != null)
{
<MudPaper Style="display:flex;float:left;margin:10px;margin-left:0px;flex-wrap:wrap">
    <!-- Shows skin chromas and their RP costs-->
        @foreach (Chroma chroma in _chromas)
        {
            <MudCard Style="margin:10px" Outlined="true">
                <MudImage Src="@chroma.Url" Alt="Chroma image"/>
                <MudCardContent Style="border:1px solid #4f4f4f;border-radius:4px;margin:5px">
                    <MudText Style="float:left">@chroma.Name</MudText>
                    <MudText
                        Style="text-align:right">@(int.TryParse(chroma.Price, out int ignor) ? chroma.Price + "RP" : chroma.Price)</MudText>
                </MudCardContent>
            </MudCard>
        }
</MudPaper>
}



@code {
    [Parameter] public string SkinId { get; set; }
    private Skin _skin;
    private List<Chroma> _chromas;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        
        int temp;
        if (!int.TryParse(SkinId, out temp))
            return;
        Skin? toAssign = await SkinRepository.GetByIdAsync(temp);
        if (toAssign == null)
            return;
        _skin = toAssign;
        
        if (_skin.ChromaList != null)
            _chromas = _skin.ChromaList.ToList();
    }

    public async Task AddToCart(int id)
    {
        ShoppingCart.Add(id);
        string skin = (await SkinRepository.GetByIdAsync(id)).Name;
        Snackbar.Add($"{skin} added to cart!", Severity.Success);
    }

    private async Task GoToBrowsePage()
    {
        await JsRuntime.InvokeVoidAsync("goBack");
    }

}
