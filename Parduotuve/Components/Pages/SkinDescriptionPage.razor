@using Parduotuve.Data.Repositories
@using Parduotuve.Data.Entities
@using System.Diagnostics
@inject ISkinRepository _skinRepository
@page "/Description/{SkinID}"

<head>
    <title>@skin.ChampionName</title>
</head>
<body>
    <h3>@skin.Name</h3>
    <br/>
    <div style="display:flex">
        <!-- Cinematic splash art-->
        <div class="cinematicSplashArt">
            <img src=@skin.CinematicSplashUrl alt="Image of @skin.Name"
            style="width:626px;height:352px;"/>
        </div>

        <!-- Skin quote-->
        <p class="quote">
            <i>@skin.Quote</i>
        </p>
        <!-- TODO make RP and release date attributes of Skin class -->
        <div style="position:relative">
            <!-- Skin RP cost-->
            <p>In-game cost: 1820 RP</p>

            <!-- Release date-->
            <p class="releaseDate">
                Released on: 2020-08-06
            </p>
        </div>
    </div>

    <br/>

    <!-- Shows skin chromas and their RP costs-->
    @if(chromas != null)
    {
        @for (int i = 0; i < chromas.Count(); i++)
        {
            <div class="boxOfChromas">
                <div class="individualChroma">
                    <img src=@chromas[i].URL alt="@chromas[i].Name" />
                </div>
                <span>@chromas[i].Name</span>
                <p style="text-align:right">@(int.TryParse(@chromas[i].Price, out int ignor) ? chromas[i].Price + "RP" : chromas[i].Price)</p>
            </div>
        }
    }


</body>

@code {
    [Parameter]
    public string SkinID { get; set; }
    private Skin skin;
    private List<Chroma> chromas;

    protected override async Task OnInitializedAsync()
    {
        await GetSkinObj();
    }

    public async Task GetSkinObj()
    {
        TextWriterTraceListener writer = new TextWriterTraceListener(System.Console.Out);
        int param = -1;
        if(!int.TryParse(SkinID,out param))
            return;
        Skin? toAssign = await _skinRepository.GetByIdAsync(param);
        if (toAssign == null)
            return;
        skin = toAssign;

        if(skin.ChromaList != null)
            chromas = skin.ChromaList.ToList();
    }
}
