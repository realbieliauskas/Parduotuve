@page "/"
@using Parduotuve.Data.Repositories
@using Parduotuve.Data.Entities
@using Parduotuve.Services
@inject ISkinRepository _skinRepository
@inject NavigationManager NavManager
@inject Shopping_Cart_Service Shopping_Cart
@inject ISnackbar Snackbar
@inject AuthService AuthService
@inject IJSRuntime _jsRuntime

<script>
    async function addLoadListeners(selector, dotNetHelper, callbackMethodName) {
        const elements = document.querySelectorAll(`.${selector}`);
        for (let x = 0; x < elements.length; x++) {
            elements[x].onload = () => {
                dotNetHelper.invokeMethodAsync(callbackMethodName);
            };

            if (elements[x].complete) {
                dotNetHelper.invokeMethodAsync(callbackMethodName);
            }
        }
        
    }
</script>
<MudPaper Class="d-inline-flex justify-center align-content-center align-center px-3 pt-2 pb-0" Style="width:100%">
    <MudSelect Variant="Variant.Outlined" Label="Sort by" Value="SortBy" T="string" ValueChanged="(async (e) => { SortBy = e;  await QueryChanged(); })" >
    
        <MudSelectItem Value="@("ChampionName")">
            <MudIcon Icon="@Icons.Material.Filled.Person4" /> Champion Name
        </MudSelectItem>
        <MudSelectItem Value="@("Price")">
            <MudIcon Icon="@Icons.Material.Filled.Euro" /> Price
        </MudSelectItem>
        <MudSelectItem Value="@("Name")">
            <MudIcon Icon="@Icons.Material.Filled.Label" /> Name
        </MudSelectItem>
    </MudSelect>
    <MudCheckBox Value="Reverse" ValueChanged="(async (e) => { Reverse = e;  await QueryChanged(); })" T="bool" Label="Reverse sort"></MudCheckBox>
    <MudSpacer />
    <MudTextField Value="SearchQuery" T="string" ValueChanged="(async (e) => { SearchQuery = e;  await QueryChanged(); })" Label="Search by skin name"></MudTextField>
</MudPaper>

<MudPaper Class="justify-center d-flex flex-wrap gap-4 py-4">
    @foreach (Skin skin in GetPageContents())
    {
        <MudCard Style="@(!DataLoaded ? "display: none;width:260px;cursor:pointer" : "width:260px;cursor:pointer")" onclick="@(()=>OpenDescription(skin.Id))">
            <MudImage Src=@(skin.SplashUrl) Class=@(ListenerClass) ObjectPosition="ObjectPosition.Center" Height="480"/>
            
            <MudCardContent>
                <MudText Typo="Typo.h5">@skin.Name</MudText>
            </MudCardContent>
            <MudCardActions Class="justify-center flex-column">
                <MudText Typo="Typo.h6" Color="Color.Secondary">@skin.Price €</MudText>
                <MudButton EndIcon="@Icons.Material.Filled.AddShoppingCart" @onclick="@(()=>AddToCart(skin.Id))">Add to cart&nbsp</MudButton>
            </MudCardActions>
        </MudCard>
    }
    @if (!DataLoaded)
    {
        @for (int i = 0; i < ItemsPerPage; i++)
        {
            <MudCard Style="width:260px;">
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="480px" />
                <MudCardContent>
                    <MudSkeleton Width="90%" Height="28px" />
                </MudCardContent>
                <MudCardActions Class="justify-center flex-column">
                    <MudSkeleton Width="60px" Height="24px" />
                    <MudSkeleton Width="140px" Height="36px" />
                </MudCardActions>
            </MudCard>
        }
    }
</MudPaper>

@if(GetPageContents().Any())
{
    <div class="d-flex flex-column align-center">
        <MudPagination BoundaryCount="2" MiddleCount="5" Count="@PageCount" Selected="@Page" SelectedChanged="@(async (page) => { Page = page; await QueryChanged(); })" Class="mt-4" />
    </div>
}
else if(DataLoaded)
{
    <h1>No results were found.</h1>
}
@code {
    [SupplyParameterFromQuery] [Parameter] public int Page { get; set; }
    [SupplyParameterFromQuery] [Parameter] public bool Reverse { get; set; }
    [SupplyParameterFromQuery] [Parameter] public string SortBy { get; set; }
    [SupplyParameterFromQuery] [Parameter] public string SearchQuery { get; set; }
    
    private const int ItemsPerPage = 12;
    private int _loadCounter = 0;
    private int PageCount => Skins.Chunk(ItemsPerPage).ToArray().Length;
    private const string ListenerClass = "image-entity";
    private int _currentPageItemCount = ItemsPerPage;
    private string _lastUrl = "";

    private IEnumerable<Skin> Skins { get; set; } = new List<Skin>();
    private bool DataLoaded { get; set; } = false;
    
    [JSInvokable]
    public async Task NotifyImagesLoaded()
    {
        _loadCounter += 1;
        if (_loadCounter >= _currentPageItemCount)
        {
            DataLoaded = true;
            StateHasChanged();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (Page <= 0)
        {
            Page = 1;
        }

        if (string.IsNullOrEmpty(SortBy))
        {
            SortBy = "ChampionName";
        }

        if (SearchQuery == null)
        {
            SearchQuery = string.Empty;
        }
        
        await FetchSkins();
        _currentPageItemCount = GetPageContents().Count();
    }
    private async Task FetchSkins()
    {
        Skins = (await _skinRepository.GetSortedSkinsAsync(SortBy)).Where(skin =>
            (skin.Name?.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (skin.ChampionName?.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) ?? false)
        );
        if (Reverse)
        {
            Skins = Skins.Reverse();
        }
    }
    protected override async Task OnInitializedAsync()
    {
        Snackbar.Configuration.PreventDuplicates = false;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_currentPageItemCount == 0)
        {
            DataLoaded = true;
            StateHasChanged();
        }
        else if (NavManager.Uri != _lastUrl)
        {
            _lastUrl = NavManager.Uri;
            DataLoaded = false;
            _loadCounter = 0;
            await _jsRuntime.InvokeVoidAsync("addLoadListeners", ListenerClass, DotNetObjectReference.Create(this), nameof(NotifyImagesLoaded));
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private IEnumerable<Skin> GetPageContents()
    {
        int tempPage = Page;
        if (Page <= 0)
            tempPage = 1;
        if (Page > PageCount)
            tempPage = PageCount;
        if (tempPage == 0 || Skins.Count() == 0)
            return Array.Empty<Skin>();

        return Skins.Chunk(ItemsPerPage).ToArray()[tempPage - 1];
    }

    private async Task ReverseSort()
    {
        Reverse = !Reverse;
        await QueryChanged();
    }

    private async Task QueryChanged()
    {
        _loadCounter = 0;
        DataLoaded = false;
        await Task.Delay(10);
        Dictionary<string, object?> parameters = new Dictionary<string, object?>();
        parameters.Add("SortBy",SortBy);
        parameters.Add("Page", Page);
        parameters.Add("Reverse", Reverse);
        parameters.Add("SearchQuery", SearchQuery);
        string queriedUri = NavManager.GetUriWithQueryParameters(parameters);
        NavManager.NavigateTo(queriedUri);
    }
    private void OpenDescription(int id)
    {
        NavManager.NavigateTo($"/Description/{id}/");
    }

    private async Task AddToCart(int id)
    {
        Shopping_Cart.Add(id);
        string skin = (await _skinRepository.GetByIdAsync(id)).Name;
        Snackbar.Add($"{skin} added to cart!", Severity.Success);
    }
}