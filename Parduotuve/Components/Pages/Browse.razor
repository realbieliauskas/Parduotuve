@page "/"
@page "/{PageParam:int}"
@using Parduotuve.Data.Repositories
@using Parduotuve.Data.Entities
@using Parduotuve.Services
@inject ISkinRepository _skinRepository
@inject NavigationManager NavManager
@inject Shopping_Cart_Service Shopping_Cart
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200&icon_names=add_shopping_cart" />

<div class="top-bar">
    <label for="sortOptions">Sort by:</label>
    <select id="sortOptions" @onchange="SortSkins">
        <option value="ChampionName">Champion Name</option>
        <option value="Price">Price</option>
        <option value="Name">Name</option>
    </select>
    <input type="text" placeholder="Search by skin name" @bind="searchQuery" @oninput="SearchSkins" style="margin-left: 10px;" />
</div>

<div style="padding: 10px; text-align: center;">
    @foreach (Skin skin in GetPageContents())
    {
        <div @onclick="@((e) => EntryClicked(false,skin.Id,e))" style="border: 1px solid black;padding:10px; margin:15px;text-align:center;cursor:pointer;display:inline-block;">
            <img src=@skin.SplashUrl style="margin:10px;height:360px;width:200px" />
            <h4>@skin.Name</h4>
            <p>@skin.ChampionName</p>
            <h3>@skin.Price €</h3>
            <button @onclick="@((e) => EntryClicked(true,skin.Id,e))">
                <span style="padding:10px; display:inline-flex;align-items:center;">
                    <p style="margin:0;margin-right:10px;">TO CART</p>
                    <span class="material-symbols-outlined">
                        add_shopping_cart
                    </span>
                </span>
            </button>
        </div>
    }
</div>

<nav>
    <ul class="pagination justify-content-center">
        <li class="page-item @(PageIndex == 0 ? "disabled" : "")">
            <a class="page-link" href="/@(PageIndex-1)" tabindex="-1">Previous</a>
        </li>

        @foreach (int indice in GetSurroundingPageIndices())
        {
            <li class="@(indice == PageIndex ? "page-item active" : "page-item")"><a class="page-link" href="/@(indice)">@(indice + 1)</a></li>
        }

        <li class="page-item @(PageIndex >= PageCount-1 ? "disabled" : "")">
            <a class="page-link" href="/@(PageIndex+1)" data-enhance-nav="false">Next</a>
        </li>
    </ul>
</nav>

@code {
    [Parameter]
    public int? PageParam { get; set; }
    private IEnumerable<Skin> Skins { get; set; } = new List<Skin>();
    private IEnumerable<Skin> FilteredSkins { get; set; } = new List<Skin>();
    private string selectedSortOption = "ChampionName";
    private string searchQuery = string.Empty;
    private static int ItemsPerPage = 10;
    private static int BarLength = 2;
    private int PageIndex { get; set; } = 0;
    private int PageCount { get { return FilteredSkins.Chunk(ItemsPerPage).ToArray().Length; } }

    protected override async Task OnInitializedAsync()
    {
        await LoadSkinsAsync();
    }

    public async override Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
        PageParam = PageParam ?? 0;
        if(PageParam < 0)
        {
            PageParam = 0;
        }
        else if(PageParam >= PageCount)
        {
            PageParam = PageCount - 1;
        }
        PageIndex = (int)PageParam;
    }

    private async Task SortSkins(ChangeEventArgs e)
    {
        selectedSortOption = e.Value?.ToString() ?? "ChampionName";
        await LoadSkinsAsync();
    }

    private async Task LoadSkinsAsync()
    {
        Skins = await _skinRepository.GetSortedSkinsAsync(selectedSortOption);
        ApplySearchFilter();
        StateHasChanged();
    }

    private void SearchSkins(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? string.Empty;
        ApplySearchFilter();
        StateHasChanged();
    }

    private IEnumerable<Skin> GetPageContents()
    {
        return FilteredSkins.Chunk(ItemsPerPage).ToArray()[PageIndex];
    }

    private IEnumerable<int> GetSurroundingPageIndices()
    {
        int leftCursor = PageIndex;
        int rightCursor = PageIndex;
        List<int> indices = new List<int>();

        indices.Add(PageIndex);

        for(int x = 0; x < BarLength; x++)
        {
            if(leftCursor - 1 < 0 && rightCursor + 1 >= PageCount)
            {
                break;
            }

            if(leftCursor - 1 >= 0)
            {
                leftCursor -= 1;
                indices.Insert(0, leftCursor);
            }
            else
            {
                rightCursor += 1;
                indices.Add(rightCursor);
            }

            if(rightCursor + 1 < PageCount)
            {
                rightCursor += 1;
                indices.Add(rightCursor);
            }
            else if(leftCursor -1 >= 0)
            {
                leftCursor -= 1;
                indices.Insert(0, leftCursor);
            }
        }

        return indices;
    }

    private void ApplySearchFilter()
    {
        FilteredSkins = Skins.Where(skin =>
            (skin.Name?.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (skin.ChampionName?.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ?? false)
        );
    }

    private double lastClickPos = -1;
    private void EntryClicked(bool cart, int id, MouseEventArgs e)
    {
        double newClickPos = e.ClientX*e.ClientY;
        if (lastClickPos == newClickPos)
        {
            lastClickPos = -1;
            return;
        }
        lastClickPos = newClickPos;
        if (cart)
        {
            Add_to_Cart(id);
            return;
        }
        NavManager.NavigateTo("/Description/" + id);
    }

    private void Add_to_Cart(int id)
    {
        Shopping_Cart.Add(id);
    }
}

<style>
    .top-bar {
        display: flex;
        justify-content: flex-end;
        padding: 10px;
        background-color: #f8f9fa;
        border-bottom: 1px solid #e7e7e7;
    }
</style>
