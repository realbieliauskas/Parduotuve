@page "/"
@page "/{PageParam:int}"
@using Parduotuve.Data.Repositories
@using Parduotuve.Data.Entities
@using Parduotuve.Services
@inject ISkinRepository _skinRepository
@inject NavigationManager NavManager
@inject Shopping_Cart_Service Shopping_Cart

@* <div class="top-bar">
    <label for="sortOptions">Sort by:</label>
    <select id="sortOptions" @onchange="SortSkins">
        <option value="ChampionName">Champion Name</option>
        <option value="Price">Price</option>
        <option value="Name">Name</option>
    </select>
    <input type="text" placeholder="Search by skin name" @bind="searchQuery" @oninput="SearchSkins" style="margin-left: 10px;" />
</div> *@

@* <div style="padding: 10px; text-align: center;"> *@
<Div Class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-4">
    @foreach (Skin skin in GetPageContents())
    {
        <Card Class="flex flex-col flex-grow items-center text-center">
            <CardImage Source=@skin.SplashUrl Class="mx-auto block max-w-full"></CardImage>
            <CardBody Class="flex flex-col flex-grow">
                <CardTitle Size="5">@skin.Name</CardTitle>
                <CardSubtitle Size="5">@skin.Price €</CardSubtitle>
                <Button Color="Color.Primary" Class="mt-auto mx-auto size-fit" @onclick="()=>Add_to_Cart(skin.Id)">Add to cart&nbsp<Icon Name="IconName.CartPlus"/></Button>
            </CardBody>
        </Card>
    }
</Div>
<Pagination Alignment="Alignment.Center">
    <PaginationItem Disabled="@(PageIndex == 0)">
        <PaginationLink Clicked="@(() => NavToPage(PageIndex-1))">
            <span aria-hidden="true">Previous</span>
        </PaginationLink>
    </PaginationItem>
    @foreach(int indice in GetSurroundingPageIndices())
    {
        <PaginationItem Active="@(indice == PageIndex)">
            <PaginationLink Clicked="@(() => NavToPage(indice))">
                @(indice+1)
            </PaginationLink>
        </PaginationItem>
    }
    <PaginationItem Disabled="@(PageIndex>=PageCount-1)">
        <PaginationLink Clicked="@(() => NavToPage(PageIndex+1))">
            <span aria-hidden="true">Next</span>
        </PaginationLink>
    </PaginationItem>
</Pagination>

@code {
    [Parameter]
    public int? PageParam { get; set; }
    private IEnumerable<Skin> Skins { get; set; } = new List<Skin>();
    private IEnumerable<Skin> FilteredSkins { get; set; } = new List<Skin>();
    private string selectedSortOption = "ChampionName";
    private string searchQuery = string.Empty;
    private static int ItemsPerPage = 12;
    private static int BarLength = 4;
    private int PageIndex { get; set; } = 0;
    private int PageCount { get { return FilteredSkins.Chunk(ItemsPerPage).ToArray().Length; } }

    protected override async Task OnInitializedAsync()
    {
        await LoadSkinsAsync();
    }

    public async override Task SetParametersAsync(ParameterView parameters)
    {
        await base.SetParametersAsync(parameters);
        PageParam = PageParam ?? 0;
        if(PageParam < 0)
        {
            PageParam = 0;
        }
        else if(PageParam >= PageCount)
        {
            PageParam = PageCount - 1;
        }
        PageIndex = (int)PageParam;
    }

    private async Task SortSkins(ChangeEventArgs e)
    {
        selectedSortOption = e.Value?.ToString() ?? "ChampionName";
        await LoadSkinsAsync();
    }

    private async Task LoadSkinsAsync()
    {
        Skins = await _skinRepository.GetSortedSkinsAsync(selectedSortOption);
        ApplySearchFilter();
        StateHasChanged();
    }

    private void SearchSkins(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? string.Empty;
        ApplySearchFilter();
        StateHasChanged();
    }

    #region Page navigation helpers
    private IEnumerable<Skin> GetPageContents()
    {
        return FilteredSkins.Chunk(ItemsPerPage).ToArray()[PageIndex];
    }
    private IEnumerable<int> GetSurroundingPageIndices()
    {
        int leftCursor = PageIndex;
        int rightCursor = PageIndex;
        List<int> indices = new List<int>();

        indices.Add(PageIndex);

        for(int x = 0; x < BarLength; x++)
        {
            if(leftCursor - 1 < 0 && rightCursor + 1 >= PageCount)
            {
                break;
            }

            if(leftCursor - 1 >= 0)
            {
                leftCursor -= 1;
                indices.Insert(0, leftCursor);
            }
            else
            {
                rightCursor += 1;
                indices.Add(rightCursor);
            }

            if(rightCursor + 1 < PageCount)
            {
                rightCursor += 1;
                indices.Add(rightCursor);
            }
            else if(leftCursor -1 >= 0)
            {
                leftCursor -= 1;
                indices.Insert(0, leftCursor);
            }
        }

        return indices;
    }
    private void NavToPage(int page)
    {
        if (page == PageIndex)
            return;

        NavManager.NavigateTo($"/{page}",false);
    }
    #endregion
    private void ApplySearchFilter()
    {
        FilteredSkins = Skins.Where(skin =>
            (skin.Name?.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (skin.ChampionName?.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ?? false)
        );
    }

    private double lastClickPos = -1;
    private void EntryClicked(bool cart, int id, MouseEventArgs e)
    {
        double newClickPos = e.ClientX*e.ClientY;
        if (lastClickPos == newClickPos)
        {
            lastClickPos = -1;
            return;
        }
        lastClickPos = newClickPos;
        if (cart)
        {
            Add_to_Cart(id);
            return;
        }
        NavManager.NavigateTo("/Description/" + id);
    }

    private void Add_to_Cart(int id)
    {
        Shopping_Cart.Add(id);
    }
}

<style>
    .top-bar {
        display: flex;
        justify-content: flex-end;
        padding: 10px;
        background-color: #f8f9fa;
        border-bottom: 1px solid #e7e7e7;
    }
</style>
