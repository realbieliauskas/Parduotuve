@page "/"
@using Parduotuve.Data.Repositories
@using Parduotuve.Data.Entities
@using Parduotuve.Services
@inject ISkinRepository _skinRepository
@inject NavigationManager NavManager
@inject Shopping_Cart_Service Shopping_Cart
@inject ISnackbar Snackbar


<MudPaper Class="d-inline-flex justify-center align-content-center align-center px-3 pt-2 pb-0" Style="width:100%">
    <MudSelect Variant="Variant.Outlined" Label="Sort by" @bind-Value="selectedSortOption" TextChanged="@(() => StaggeredLoadSkinsAsync())">
        <MudSelectItem Value="@("ChampionName")">
            <MudIcon Icon="@Icons.Material.Filled.Person4" /> Champion Name
        </MudSelectItem>
        <MudSelectItem Value="@("Price")">
            <MudIcon Icon="@Icons.Material.Filled.Euro" /> Price
        </MudSelectItem>
        <MudSelectItem Value="@("Name")">
            <MudIcon Icon="@Icons.Material.Filled.Label" /> Name
        </MudSelectItem>
    </MudSelect>
    <MudCheckBox @bind-Value="isReversed" @oninput="StaggeredLoadSkinsAsync" Label="Reverse sort"></MudCheckBox>
    <MudSpacer />
    <MudTextField @bind-Value="searchQuery" @oninput="StaggeredLoadSkinsAsync" Label="Search by skin name"></MudTextField>
</MudPaper>

<MudPaper Class="justify-center d-flex flex-wrap gap-4 py-4">
    @if (dataLoaded)
    {
        @foreach (Skin skin in GetPageContents())
        {
            <MudCard Style="width:260px;cursor:pointer" onclick="@(()=>OpenDescription(skin.Id))">
                <MudCardMedia Image="@skin.SplashUrl" Height="480"/>
                <MudCardContent>
                    <MudText Typo="Typo.h5">@skin.Name</MudText>
                </MudCardContent>
                <MudCardActions Class="justify-center flex-column">
                    <MudText Typo="Typo.h6" Color="Color.Secondary">@skin.Price €</MudText>
                    <MudButton EndIcon="@Icons.Material.Filled.AddShoppingCart" @onclick="@(()=>AddToCart(skin.Id))">Add to cart&nbsp</MudButton>
                </MudCardActions>
            </MudCard>
        }
    }
    else
    {
        @for (int i = 0; i < 6; i++)
        {
            <MudCard Style="width:260px;">
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="480px" />
                <MudCardContent>
                    <MudSkeleton Width="90%" Height="28px" />
                </MudCardContent>
                <MudCardActions Class="justify-center flex-column">
                    <MudSkeleton Width="60px" Height="24px" />
                    <MudSkeleton Width="140px" Height="36px" />
                </MudCardActions>
            </MudCard>
        }
    }
</MudPaper>

@if(GetPageContents().Count() > 0 || !dataLoaded)
{
    <div class="d-flex flex-column align-center">
        <MudPagination BoundaryCount="2" MiddleCount="5" Count="@PageCount" Selected="@Page" SelectedChanged="@((page) => NavToPage(page))" Class="mt-4" />
    </div>
}
else if(dataLoaded)
{
    <h1>No results were found.</h1>
}

@code {
    [SupplyParameterFromQuery]
    [Parameter]
    public int Page { get; set; }
    private static int ItemsPerPage = 12;
    private int PageCount { get { return FilteredSkins.Chunk(ItemsPerPage).ToArray().Length; } }

    private bool dataLoaded { get; set; } = false;

    private IEnumerable<Skin> Skins { get; set; } = new List<Skin>();
    private IEnumerable<Skin> FilteredSkins { get; set; } = new List<Skin>();
    private string selectedSortOption { get; set; } = "ChampionName";
    private string searchQuery = string.Empty;
    private bool isReversed = false;

    protected override async Task OnInitializedAsync()
    {
        // await Unload();
        Snackbar.Configuration.PreventDuplicates = false;
        if(Page<=0) { Page = 1; }
        {
            await LoadSkinsAsync();
            dataLoaded = true;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        dataLoaded = true;
        if(firstRender)
        {
            StateHasChanged();
        }
        await Task.Delay(1);
    }
    private async Task Unload(bool forceUpdate = true)
    {
        dataLoaded = false;
        if(forceUpdate)
        {
            StateHasChanged();
        }
        await Task.Delay(50);
    }
    private async Task StaggeredLoadSkinsAsync()
    {
        await Unload();
        await LoadSkinsAsync();
    }
    private async Task LoadSkinsAsync()
    {
        Skins = await _skinRepository.GetSortedSkinsAsync(selectedSortOption);
        ApplySearchFilter();
    }

    private IEnumerable<Skin> GetPageContents()
    {
        int tempPage = Page;
        if (Page <= 0)
            tempPage = 1;
        if (Page > PageCount)
            tempPage = PageCount;
        if (tempPage == 0 || FilteredSkins.Count() == 0)
            return Array.Empty<Skin>();

        return FilteredSkins.Chunk(ItemsPerPage).ToArray()[tempPage - 1];
    }
    private async void NavToPage(int page)
    {
        await Unload();
        string pagedUri = NavManager.GetUriWithQueryParameter("Page", page);
        NavManager.NavigateTo(pagedUri, true);
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadSkinsAsync();
    }

    private void ApplySearchFilter()
    {
        FilteredSkins = Skins.Where(skin =>
            (skin.Name?.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (skin.ChampionName?.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ?? false)
        );
        if (isReversed)
        {
            FilteredSkins = FilteredSkins.Reverse();
        }
    }

    private void OpenDescription(int id)
    {
        NavManager.NavigateTo("/Description/" + id);
    }

    private async Task AddToCart(int id)
    {
        Shopping_Cart.Add(id);
        string skin = (await _skinRepository.GetByIdAsync(id)).Name;
        Snackbar.Add($"{skin} added to cart!", Severity.Success);
    }
}